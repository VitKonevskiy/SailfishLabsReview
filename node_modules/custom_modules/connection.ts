'use strict';

const 
    MongoClient = require("mongodb").MongoClient,
    dbUrl = "mongodb://localhost:27017",
    dbConfig = { useNewUrlParser:true },
    dbName = "sailfish_reviews",
    dbReviewsCollection = "reviews",
    dbUsersCollection = "users";    

let mongoose = require('mongoose');
//mongoose.connect(dbUrl + '/' + dbName, {useNewUrlParser: true});
/*mongoose.connect('mongodb://localhost/sailfish_reviews', {useNewUrlParser: true});
var db = mongoose.connection;

var kittySchema = new mongoose.Schema({
    name: String
  });
var Kitten = mongoose.model('Kitten', kittySchema);


db.on('error', console.error.bind(console, 'connection error:'));
db.once('open', function() {
  // we're connected!
  var silence = new Kitten({ name: 'Silence' });
  console.log(silence.name); // 'Silence'
  silence.save(function (err, silence){
    if (err) return console.error(err);
    console.log(silence);
  });
});

exports.getKitten = () =>{
    return Kitten;
}

exports.getDbCollectionName = () => {
    return dbName;
}*/

class Database {
    constructor() {
      this._connect()
    }
    _connect() {
       mongoose.connect(`${dbUrl}/${dbName}`)
         .then(() => {
           console.log('Database connection successful')
         })
         .catch(err => {
           console.error('Database connection error')
         })
    }
  }
module.exports = new Database()

exports.collectionExist = function(collectionName, callback) {
    MongoClient.connect(dbUrl, dbConfig, function(err, client){
        try{
            const db = client.db(dbName);
            
            if (db == null){
                console.log("db is null");
            }
            db.collection(collectionName).find({}).toArray((err, users)=>{
                if (!err && users.length > 0){
                    console.log("Collection " + collectionName + " is exist");
                    callback(true);
                } else {
                    console.log("Collection " + collectionName + " is NOT exist");
                    callback(false);
                }
            });
        }
        catch (err){
            console.log(err)
            console.log("Catched Collection " + collectionName + " is NOT exist");
            callback(false);
        }
    });
}

/*






exports.addUser = (Login, Password, Name, SecondName, Group, Email, Phone) => {
    let student = {login: Login, password: Password, name: Name, secondName: SecondName, group: Group, email: Email, phone: Phone};
	insertIntoDb(dbUsersCollection, student);
}

var insertIntoDb = function(dbCollection, insertedData){
    MongoClient.connect(dbUrl, dbConfig, function(err, client){
    	if(err){
        	return console.log(err);
    	}
    
    	const db = client.db(dbName);
    	db.collection(dbCollection).insertOne(insertedData, function(err, result)
    	{
    		//console.log(result)
    		if(err){
        		console.log(err);
    		}
    		client.close();
    	});
	});
};

exports.findUser = function(mLogin, callback) {
	var dbResult
	MongoClient.connect(dbUrl, dbConfig, function(err, client){
 
        if(err){
            return console.log(err);
        }
    
        const db = client.db(dbName);
        const collection = db.collection(dbUsersCollection);

        let user = {login: mLogin};
        collection.find(user).toArray(function(err, result){
    	    client.close();
            callback(result);
        });

	});

	return dbResult
}

exports.bin = function(input) {
    return input.toString(2)
};

exports.hex = function(input) {
    return input.toString(16)
};*/